openapi: 3.0.0
info:
  title: 'HBO ICT Project API'
  contact:
    email: 560567@student.saxion.nl
  version: 1.0.0
servers:
  - url: 'http://localhost:1337'
    description: 'Development server'
paths:
  /api/register:
    post:
      tags:
        - Auth
      summary: 'Register into the system'
      operationId: d0db4b93-08e1-4140-8420-7b5d63ef02b0
      security:
        - BearerAuth: []
      requestBody:
        description: 'User registration data'
        required: true
        content:
          application/json:
            schema:
              required:
                - first_name
                - email
                - password
                - password_confirmation
              properties:
                first_name:
                  type: string
                  maxLength: 20
                  example: 'John'
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: john.doe@gmail.com
                password:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
                password_confirmation:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
              type: object
      responses:
        '204':
          description: 'User registered successfully'
        '422':
          description: 'Validation error'
  /api/login:
    post:
      tags:
        - Auth
      summary: 'Login to the system'
      operationId: ddf28c4b-de11-4486-ac2a-60f5164160ce
      security:
        - BearerAuth: []
      requestBody:
        description: 'User login data'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: john.doe@gmail.com
                password:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
              type: object
      responses:
        '204':
          description: 'User logged in successfully'
        '422':
          description: 'Validation error'
  /api/logout:
    post:
      tags:
        - Auth
      summary: 'Logout from the system'
      operationId: 1d142b00-64c5-4ba7-b9af-c78f3c4ceacb
      security:
        - BearerAuth: []
      responses:
        '204':
          description: 'User logged out successfully'
  /api/user/{user_id}/location:
    post:
      tags:
        - Location
      summary: "Upload user's location"
      security:
        - BearerAuth: []
      operationId: fc324fe8-dddc-48eb-b958-6cad44d6c1f8
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      requestBody:
        description: 'Location data'
        required: true
        content:
          application/json:
            schema:
              required:
                - longitude
                - latitude
              properties:
                longitude:
                  type: number
                  format: float
                  example: 19.455982
                latitude:
                  type: number
                  format: float
                  example: 51.759247
              type: object
      responses:
        '200':
          description: 'Success response'
    get:
      tags:
        - Location
      summary: "Get user's location"
      security:
        - BearerAuth: []
      operationId: 74d05635-abca-4963-a3f6-2158d742e65c
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      responses:
        '200':
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/LocationResource' }
                type: object
        '404':
          description: 'Not found'
  /api/user/{user_id}/schedule:
    post:
      tags:
        - Schedule
      summary: 'Upload schedule'
      security:
        - BearerAuth: []
      operationId: d8da3f40-ece5-4e12-8a00-b06b2c374d5b
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      requestBody:
        description: 'Schedule data'
        required: true
        content:
          application/json:
            schema:
              required:
                - weekday
              properties:
                schedule_id:
                  type: integer
                user_id:
                  type: integer
                weekday:
                  type: integer
              type: object
      responses:
        '200':
          description: 'Success response'
    get:
      tags:
        - Schedule
      summary: "Get all user's schedules"
      security:
        - BearerAuth: []
      operationId: 427fa846-aeb6-4864-b67b-70338e1a7f19
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      responses:
        '200':
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/ScheduleResource' }
                type: object
        '404':
          description: 'Not found'
  /api/schedule/{schedule_id}/time:
    get:
      tags:
        - Schedule
      summary: "Get all schedule's times"
      security:
        - BearerAuth: []
      operationId: getAllTimesForSchedule
      parameters:
        - $ref: '#/components/parameters/schedule_id_param'
      responses:
        '200':
          description: 'Success response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeResource'
        '404':
          description: 'Schedule not found'
    post:
      tags:
        - Schedule
      summary: 'Upload a new time for a schedule'
      security:
        - BearerAuth: []
      operationId: createTimeForSchedule
      parameters:
        - $ref: '#/components/parameters/schedule_id_param'
      requestBody:
        description: 'Time data'
        required: true
        content:
          application/json:
            schema:
              required:
                - start_time
                - end_time
              properties:
                start_time:
                  type: string
                  format: time
                  example: '08:00:00'
                end_time:
                  type: string
                  format: time
                  example: '18:00:00'
              type: object
      responses:
        '201':
          description: 'Time created successfully'
        '400':
          description: 'Invalid data'
  /api/schedule/{schedule_id}/time/{time_id}:
    get:
      tags:
        - Schedule
      summary: 'Get a specific time'
      security:
        - BearerAuth: []
      operationId: getTimeByIdForSchedule
      parameters:
        - $ref: '#/components/parameters/schedule_id_param'
        - $ref: '#/components/parameters/time_id_param'
      responses:
        '200':
          description: 'Success response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeResource'
        '404':
          description: 'Time not found'
    put:
      tags:
        - Schedule
      summary: 'Update a specific time'
      security:
        - BearerAuth: []
      operationId: updateTimeByIdForSchedule
      parameters:
        - $ref: '#/components/parameters/schedule_id_param'
        - $ref: '#/components/parameters/time_id_param'
      requestBody:
        description: 'Updated time data'
        required: true
        content:
          application/json:
            schema:
              required:
                - start_time
                - end_time
              properties:
                start_time:
                  type: string
                  format: time
                  example: '08:00:00'
                end_time:
                  type: string
                  format: time
                  example: '18:00:00'
              type: object
      responses:
        '200':
          description: 'Time updated successfully'
        '404':
          description: 'Time not found'
        '400':
          description: 'Invalid data'
    delete:
      tags:
        - Schedule
      summary: 'Delete a specific time'
      security:
        - BearerAuth: []
      operationId: deleteTimeByIdForSchedule
      parameters:
        - $ref: '#/components/parameters/schedule_id_param'
        - $ref: '#/components/parameters/time_id_param'
      responses:
        '200':
          description: 'Time deleted successfully'
        '404':
          description: 'Time not found'
  /api/user/{user_id}/solar:
    post:
      tags:
        - Solar
      summary: "Upload solar setup for a user"
      security:
        - BearerAuth: []
      operationId: d86d658c-c054-47e6-99a6-11a808460c22
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      requestBody:
        description: 'Solar setup data'
        required: true
        content:
          application/json:
            schema:
              required:
                - panel_count
                - panel_type
                - panel_area
                - tilt
                - azimuth
                - peak_power
              properties:
                panel_count:
                  type: integer
                panel_type:
                  type: integer
                panel_area:
                  type: number
                  format: float
                tilt:
                  type: number
                  format: float
                azimuth:
                  type: number
                  format: float
                peak_power:
                  type: number
                  format: float
              type: object
      responses:
        '200':
          description: 'Success response'
    get:
      tags:
        - Solar
      summary: "Get user's solar setup"
      security:
        - BearerAuth: []
      operationId: getUserSolarSetup
      parameters:
        - $ref: '#/components/parameters/user_id_param'
      responses:
        '200':
          description: 'Success response'
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/SolarResource'
                type: object
        '404':
          description: 'Not found'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserResource:
      title: UserResource
      properties:
        user_id:
          type: integer
          format: int64
          example: 1
        location_id:
          type: integer
          format: int64
        first_name:
          type: string
          maxLength: 20
          example: 'John'
        email:
          type: string
          format: email
          maxLength: 255
          example: john.doe@gmail.com
        password:
          type: string
          maxLength: 255
          example: 'password123'
      type: object
    LocationResource:
      title: LocationResource
      properties:
        location_id:
          type: integer
          format: int64
          example: 1
        longitude:
          type: number
          format: float
          example: 19.455982
        latitude:
          type: number
          format: float
          example: 51.759247
      type: object
    ScheduleResource:
      title: ScheduleResource
      properties:
        schedule_id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        weekday:
          type: integer
          format: int32
          example: 2
      type: object
    SolarResource:
      title: SolarResource
      properties:
        solar_id:
          type: integer
          format: int64
          example: 1
        location_id:
          type: integer
          format: int64
        panel_count:
          type: integer
          format: int32
          example: 10
        panel_type:
          type: integer
          format: int32
          example: 10
        panel_area:
          type: number
          format: float
          example: 25.5
        tilt:
          type: number
          format: float
          example: 30.0
        azimuth:
          type: number
          format: float
          example: 180.0
        peak_power:
          type: number
          format: float
          example: 10.5
      type: object
    TimeResource:
      title: TimeResource
      properties:
        time_id:
          type: integer
          format: int32
          example: 1
        schedule_id:
          type: integer
          format: int32
        start_time:
          type: string
          format: time
          example: '08:00:00'
        end_time:
          type: string
          format: time
          example: '18:00:00'
      type: object
  parameters:
    user_id_param:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    location_id_param:
      name: location_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    solar_id_param:
      name: solar_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    schedule_id_param:
      name: schedule_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    time_id_param:
      name: time_id
      in: path
      required: true
      schema:
        type: integer
        format: int64
        example: 1