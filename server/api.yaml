openapi: 3.0.0
info:
  title: 'HBO ICT Project API'
  contact:
    email: 560567@student.saxion.nl
  version: 1.0.0
servers:
  - url: 'http://localhost:1337'
    description: 'Development server'
paths:
  /api/register:
    post:
      tags:
        - Auth
      summary: 'Register into the system'
      operationId: handleRegister
      requestBody:
        description: 'User registration data'
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - email
                - password
                - password_confirmation
              properties:
                first_name:
                  type: string
                  maxLength: 20
                  example: 'John'
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: john.doe@gmail.com
                password:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
                password_confirmation:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
      responses:
        '200':
          description: 'User registered successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: 'User already exists'
        '422':
          description: 'Passwords do not match'
        '500':
          description: 'Internal server error'
  /api/login:
    post:
      tags:
        - Auth
      summary: 'Login to the system'
      operationId: checkUserExist
      requestBody:
        description: 'User login data'
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: john.doe@gmail.com
                password:
                  type: string
                  maxLength: 255
                  minLength: 8
                  example: password123
      responses:
        '200':
          description: 'User logged in successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: 'Invalid email or password'
        '500':
          description: 'Server error'
  /api/advice:
    get:
      tags:
        - Advice
      summary: 'Assign schedules to peak times'
      operationId: assignSchedulesToPeakTimes
      responses:
        '200':
          description: 'Best time to use washing machine'
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: string
                  date:
                    type: string
        '400':
          description: 'Authentication failed'
        '500':
          description: 'Server error'
  /api/notification/send-notification:
    post:
      tags:
        - Notification
      summary: 'Send recommendation notification'
      operationId: sendRecommendationNotification
      requestBody:
        description: 'Notification data'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationToken:
                  type: string
                time:
                  type: string
                date:
                  type: string
      responses:
        '200':
          description: 'Notification sent successfully'
        '400':
          description: 'No notification token provided or Authentication failed'
        '500':
          description: 'Server error'
  /api/notification/save-subscription:
    post:
      tags:
        - Notification
      summary: 'Save subscription'
      operationId: saveSubscription
      requestBody:
        description: 'Subscription data'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscription:
                  type: object
      responses:
        '200':
          description: 'Subscription saved successfully'
        '400':
          description: 'No subscription provided or Authentication failed'
        '500':
          description: 'Server error'
  /api/notification/vapid-public-key:
    get:
      tags:
        - Notification
      summary: 'Get Vapid public key'
      operationId: getVapidPublicKeyController
      responses:
        '200':
          description: 'Vapid public key retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  publicKey:
                    type: string
  /api/schedule:
    post:
      tags:
        - Schedule
      summary: 'Add a scheduled wash'
      operationId: addScheduledWash
      requestBody:
        description: 'Scheduled wash data'
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - homeconnectrefresh
                - date
                - washer_id
                - settings
              properties:
                homeconnectrefresh:
                  type: string
                date:
                  type: string
                  format: date-time
                washer_id:
                  type: string
                settings:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        key:
                          type: string
                        options:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
      responses:
        '200':
          description: 'Schedule successfully added'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  schedule_id:
                    type: string
        '400':
          description: 'Invalid request or User not signed in'
        '500':
          description: 'Server error'
    get:
      tags:
        - Schedule
      summary: "Get user's schedules"
      operationId: getScheduledWash
      responses:
        '200':
          description: 'Schedules retrieved successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleEntry'
        '400':
          description: 'Authentication failed'
  /api/schedule/{schedule_id}:
    delete:
      tags:
        - Schedule
      summary: 'Delete a specific schedule'
      operationId: deleteScheduledWash
      parameters:
        - name: schedule_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Schedule deleted successfully'
        '400':
          description: 'Authentication failed'
        '404':
          description: 'Schedule not found'
  /api/setting/profiletype:
    get:
      tags:
        - Setting
      summary: 'Get profile type'
      operationId: getProfiletype
      responses:
        '200':
          description: 'Profile type retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileType:
                    type: string
        '401':
          description: 'Access token is missing'
        '403':
          description: 'Invalid access token'
        '500':
          description: 'Internal server error'
  /api/user/info:
    get:
      tags:
        - User
      summary: 'Get user info'
      operationId: checkUserInfo
      responses:
        '200':
          description: 'User info retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  redirect:
                    type: string
        '400':
          description: 'User not signed in'
    post:
      tags:
        - User
      summary: 'Set profile type'
      operationId: setProfiletype
      requestBody:
        description: 'Profile type data'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profile_type:
                  type: string
      responses:
        '200':
          description: 'Profile type updated successfully'
        '401':
          description: 'Access token is missing'
        '403':
          description: 'Invalid access token'
        '500':
          description: 'Internal server error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        first_name:
          type: string
          maxLength: 20
          example: 'John'
        email:
          type: string
          format: email
          maxLength: 255
          example: john.doe@gmail.com
        password:
          type: string
          maxLength: 255
          example: 'password123'
        profile_type:
          type: integer
          example: 1
        ifFirstLogin:
          type: boolean
          example: true
        subscription:
          type: string
          example: '{"endpoint":"https://example.com","keys":{"p256dh":"example","auth":"example"}}'
    ScheduleEntry:
      type: object
      properties:
        schedule_id:
          type: integer
          example: 1
        schedule_uuid:
          type: string
          example: '10000000-1000-4000-8000-100000000000'
        user_id:
          type: integer
          example: 1
        datetime:
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        program:
          type: string
          example: 'washing_program_1'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ScheduleOption'
    ScheduleOption:
      type: object
      properties:
        schedule_option_id:
          type: integer
          example: 1
        key:
          type: string
          example: 'temperature'
        value:
          type: string
          example: '60'
    Timeslot:
      type: object
      properties:
        schedule_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        weekday:
          type: integer
          example: 2
        times:
          type: array
          items:
            $ref: '#/components/schemas/TimeslotTime'
    TimeslotTime:
      type: object
      properties:
        time_id:
          type: integer
          example: 1
        schedule_id:
          type: integer
          example: 1
        start_time:
          type: string
          example: '08:00'
        end_time:
          type: string
          example: '10:00'
